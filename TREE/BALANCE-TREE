# 一个m阶的B树具有如下几个特征：
	1. 根结点至少有两个子女
	2. 每个中间结点都包含k - 1个元素和k个孩子，其中m / 2 <= k <= m
	3. 每个叶结点都包含k - 1个元素，其中m / 2 <= k <= m
	4. 所有叶子结点都位于同一层
	5. 每个结点的元素从小到大排列，结点当中k - 1个元素正好是k个孩子包含的元素的值域划分

# EXAMPLE:
	三阶B-树
                                                   _____
				                  |__9__|
						    
						/       \
				           ________      ____
				          |_2____6_|    |_12_|
                                          
                                          /    |    \    /   \
				       ___   _____   _	__  _______
				      |_1_| |3___5| |8||11||_13__15|

# (2, 6)结点有两个元素，有三个孩子1, (3, 5), 8
# 查询"5"过程:
	1. 第一次IO，9
	2. 第二次IO，(2, 6)
	3. 第三次IO，(3, 5)
B-树在查询中比较次数不比二叉查找树少，尤其当单一结点中的元素数量较多时
可是相比磁盘IO速度，内存中的比较耗时几乎可以忽略，所以只要树的高度足够低，IO次数足够少，就可以提高查找性能

# 插入操作
	插入4
                                                   _____
				                  |__9__|
						    
						/       \
				           ________      ____
				          |_2____6_|    |_12_|
                                          
                                          /    |    \    /   \
				       ___   _____   _	__  _______
				      |_1_| |3___5| |8||11||_13__15|
					       |
					       4
		自顶向下查找4的位置，应在3，5之间，
		(3, 5)结点已经是两个元素，无法再增加，父结点(2, 6)也是两元素结点无法增加。根结点是单		元素结点，可以升级为两元素结点。于是拆分(3, 5)与(2, 6)让根结点升级为(4, 9)

                                                   _______
				                  |_4___9_|
						    
						/     |     \
				           ___      _____   ____
				          |_2_|    |__6_|  |_12_|
                                          
                                          /   \     /   \   /    \
				       ___   __    ___	 _   __  _______
				      |_1_|  |3_| |_5_| |8| |11||_13__15|
					   
# 删除操作
	删除11

                                                   _______
				                  |_4___9_|
						    
						/     |     \
				           ___      _____   ____
				          |_2_|    |__6_|  |_12_|
                                          
                                          /   \     /   \       \
				       ___   __    ___	 _       _______
				      |_1_|  |3_| |_5_| |8|     |_13__15|

		删除11后，结点12只有一个孩子，不符合B树规范，因此找出12，13，15三个结点的中位数13，取		代结点12，而结点12自身下移成为第一个孩子（左旋）


                                                   _______
				                  |_4___9_|
						    
						/     |     \
				           ___      _____   ____
				          |_2_|    |__6_|  |_13_|
                                          
                                          /   \     /   \    /   \
				       ___   __    ___	 _   __    ____
				      |_1_|  |3_| |_5_| |8| |12|  |_15_|

B-树的应用：
	文件系统以及部分数据库索引，比如著名非关系型数据库MongoDB
		
		
	
